Overview
===========

This tool uses javadoc to parse java source files. Javadoc provides
an API (doclet), which is being used to drive the generation of XML. For
a given invocation of this doclet, one monolithic XML file is generated
which is the sum of all clasess, methods, enums, interfaces, exceptions,
and any other documentable entity within Java.


Structure of the Generated XML
------------------------------

The XML file generated by xml-doclet has as top-level entities which are
1st-class members of Java. Specifically, `class`, `interface`, `enum`,
and `exception` are top-level entities in this file. Methods, fields,
method arguments, and other sub-entities occur as child elements of the
top-level entities, in order to preserve their relationships with the
top-level entities. These sub-entities usually refer to the type
information of one of the top-level entities; this is accomplished
simply be referring to the full type name of that top-level entity.


Project Basics
--------------
This project is completely maven-based.  The heart of a maven project is
the pom.xml file, which defines dependencies, plugins, and other
project-related items.


Building the Project
--------------------
To build the project and run unit tests, one can execute from the project
root dir:  
mvn clean test 


Packaging the Project
---------------------
To package the project using the maven appassembler plugin, execute: 
mvn package appassembler:assemble 

If you run appassembler with the above command, a bat script and shell
script will be created by this plugin and placed in
project_root_dir/target/appassembler/bin. This script can be invoked
directly with just the command line arguments of xml-doclet.  To see
help on xml-doclet, execute:
project_root_dir/target/appassembler/xmldoclet --help


Running the Project
-------------------
To see xml-doclet in action, you could run it against this project:

project_root_dir/target/appassembler/bin/xmldoclet -sp project_root_dir/src/main/java -sub com

NOTE!!!  appassembler changes the working directory to project_root_dir/target/appassembler

So running this example from the project root dir on windows:

> ./target/appassembler/bin/xmldoclet.bat -sp ../../src/main/java/ -sub com

on mac:

> sh ./target/appassembler/bin/xmldoclet -sp ../../src/main/java/ -sub com

The resulting output file in this case would be at:
./target/appassembler/javadoc.xml

IDE Integration: Intellij IDEA
------------------------------
To use with Intellij IDEA, the latest version supports maven-based projects
natively.  All you should have to do is open the pom.xml and Intellij
will create a project for you.


IDE Integration: Eclipse
------------------------

To use with Eclipse, you will need a maven plugin, such as m2 or q4e.  
